<?php
/**
 * Created by PhpStorm.
 * User: Rostyslav
 * Date: 09.05.2016
 * Time: 19:24
 */
namespace Upages_Post_Type;
use Upages_Objects\Custom_Post_Type;
/**
 * Class Claim_Post_Type
 *
 * @package Upages_Post_Type
 */
class Coupons_Post_Type{
    /**
     * @type
     */
    public $post_type;
    /**
     * @type string
     */
    public $post_type_name = 'Coupons';
    /**
     * @type string
     */
    public $post_type_prefix;
    /**
     * @type string
     */
    public $post_type_slug;
    /**
     * @type array
     */
    public $post_type_option
           [
                'show_in_menu' => 'listings',
                'supports'     => ['author'],
                'has_archive'  => true,
                'show_ui'      => true,
                'categories'   => [],
            ]
 /**
  * Coupons_Post_Type constructor.
  */
    public function __construct()
    {
        $this->post_type_slug = sanitize_title($this->post_type_name);
        $this->post_type_prefix = sanitize_title($this->post_type_name).'_';
        $this->setPostType();
        add_action('init', [$this, 'definition'], 11);
        add_action('cmb2_init', [$this, 'fields']);
        add_action('widgets_init', [$this, 'register']);
        add_action('wp_enqueue_scripts', [$this, 'enqueue_frontend']);
        add_action('pre_get_posts', [$this, 'archive']);
    }
        /**
         *
         */
    public function setPostType()
    {
       $this->post_type->labels = [
            'name'               => __('Coupons', 'inventor-coupons'),
            'singular_name'      => __('Coupon', 'inventor-coupons'),
            'add_new'            => __('Add New Coupon', 'inventor-coupons'),
            'add_new_item'       => __('Add New Coupon', 'inventor-coupons'),
            'edit_item'          => __('Edit Coupon', 'inventor-coupons'),
            'new_item'           => __('New Coupon', 'inventor-coupons'),
            'all_items'          => __('Coupons', 'inventor-coupons'),
            'view_item'          => __('View Coupon', 'inventor-coupons'),
            'search_items'       => __('Search Coupon', 'inventor-coupons'),
            'not_found'          => __('No Coupons found', 'inventor-coupons'),
            'not_found_in_trash' => __('No Coupons Found in Trash', 'inventor-coupons'),
            'parent_item_colon'  => '',
            'menu_name'          => __('Coupons', 'inventor-coupons'),
        ];  
    }
 public function fields()
 {
     if ( ! is_admin()) {
         Post_Types::add_metabox('coupon', ['general']);
     }
     Post_Types::add_metabox('coupon', [
         'datetime_interval',
         'Inventor_Coupons_Metaboxes::details',
         'Inventor_Coupons_Metaboxes::codes',
         'gallery',
         'banner',
         'contact',
         'faq',
         'flags',
         'location',
         'listing_category',
     ]);
 }
 public  function metabox_details()
 {
     $cmb = new_cmb2_box([
         'id'           => INVENTOR_COUPON_PREFIX . 'details',
         'title'        => __('Coupon details', 'inventor-coupons'),
         'object_types' => ['coupon'],
         'context'      => 'normal',
         'priority'     => 'high',
         'show_names'   => true,
         'skip'         => true,
     ]);
     $cmb->add_field([
         'id'          => INVENTOR_COUPON_PREFIX . 'discount',
         'name'        => __('Discount', 'inventor-coupons'),
         'type'        => 'text',
         'description' => __('Insert integer number like: 30. It will be outputted as 30%.', 'inventor-coupons'),
     ]);
     $cmb->add_field([
         'id'      => INVENTOR_COUPON_PREFIX . 'variant',
         'name'    => __('Variant', 'inventor-coupons'),
         'type'    => 'radio',
         'default' => 'image',
         'options' => [
             'image'          => __('Image', 'inventor-coupons'),
             'code'           => __('Code', 'inventor-coupons'),
             'code_generated' => __('Generated code', 'inventor-coupons'),
         ],
     ]);
     $cmb->add_field([
         'id'   => INVENTOR_COUPON_PREFIX . 'image',
         'name' => __('Image', 'inventor-coupons'),
         'type' => 'file',
     ]);
     $cmb->add_field([
         'id'          => INVENTOR_COUPON_PREFIX . 'count',
         'name'        => __('Max. number', 'inventor-coupons'),
         'type'        => 'text',
         'description' => __('Insert integer for max. number of codes which can be generated.',
             'inventor-coupons'),
     ]);
     $cmb->add_field([
         'id'   => INVENTOR_COUPON_PREFIX . 'code',
         'name' => __('Coupon code', 'inventor-coupons'),
         'type' => 'text',
     ]);
     $cmb->add_field([
         'id'   => INVENTOR_COUPON_PREFIX . 'valid',
         'name' => __('Coupon Valid', 'inventor-coupons'),
         'type' => 'text',
     ]);
     $cmb->add_field([
         'id'   => INVENTOR_COUPON_PREFIX . 'conditions',
         'name' => __('Conditions', 'inventor-coupons'),
         'type' => 'textarea',
     ]);
 }

        /**
         * Codes.
         */
        public function metabox_codes()
        {
            // codes
            $cmb   = new_cmb2_box([
                'id'           => INVENTOR_COUPON_PREFIX . 'codes',
                'title'        => __('Generated Code', 'inventor-coupons'),
                'object_types' => ['coupon'],
                'context'      => 'normal',
                'priority'     => 'high',
                'skip'         => true,
            ]);
            $group = $cmb->add_field([
                'id'         => INVENTOR_COUPON_PREFIX . 'codes',
                'type'       => 'group',
                'post_type'  => 'coupon',
                'repeatable' => true,
                'options'    => [
                    'group_title'   => __('Generated Codes', 'inventor-coupons'),
                    'add_button'    => __('Add Another Code', 'inventor-coupons'),
                    'remove_button' => __('Remove Code', 'inventor-coupons'),
                ],
            ]);
            $cmb->add_group_field($group, [
                'id'   => INVENTOR_COUPON_PREFIX . 'user_id',
                'name' => __('User ID', 'inventor-coupon'),
                'type' => 'text',
            ]);
            $cmb->add_group_field($group, [
                'id'   => INVENTOR_COUPON_PREFIX . 'code_generated',
                'name' => __('Code', 'inventor-coupon'),
                'type' => 'text',
            ]);
        }

     /**
      * Filter coupons on archive page.
      *
      * @param $query
      *
      * @return WP_Query|null
      */

    public function archive($query)
    {
        if (is_post_type_archive(['coupon']) && $query->is_main_query() && !is_admin()) {
            $coupon_query = self::get_condition();
            $meta_query = $query->get('meta_query');
            $query->set('meta_query', array_merge($meta_query, $coupon_query));
        }
    }
     /**
      * Get coupons filter condition.
      * @return array
      */
     public function get_condition()
 {
     return [
         'relation' => 'AND',
         [
             'relation' => 'OR',
             [
                 'key'     => INVENTOR_LISTING_PREFIX . 'datetime_from',
                 'value'   => time(),
                 'compare' => '<=',
                 'type'    => 'NUMERIC',
             ],
             [
                 'key'     => INVENTOR_LISTING_PREFIX . 'datetime_from',
                 'compare' => 'NOT EXISTS',
             ],
         ],
         [
             'relation' => 'OR',
             [
                 'key'     => INVENTOR_LISTING_PREFIX . 'datetime_to',
                 'value'   => time(),
                 'compare' => '>=',
                 'type'    => 'NUMERIC',
             ],
             [
                 'key'     => INVENTOR_LISTING_PREFIX . 'datetime_to',
                 'compare' => 'NOT EXISTS',
             ],
         ],
     ];
 }
    /**
     * Class Coupons_Ajax.
     * @class  Coupons_Ajax
     * @author Rostyslav
     */
  /**
   * Generate coupon code.
   */
            public function generate_code()
            {
                header('HTTP/1.0 200 OK');
                header('Content-Type: application/json');
                $coupon_id = absint($_GET['id']);
                // Validated coupon ID
                if (empty($coupon_id) || ! is_int($coupon_id)) {
                    echo json_encode([
                        'status'  => false,
                        'message' => esc_attr__('Missing coupon ID.', 'inventor-coupons'),
                    ]);
                    wp_die();
                }
                $coupon = get_post($coupon_id);
                // Check if coupon exists
                if (null === $coupon) {
                    echo json_encode([
                        'status'  => false,
                        'message' => esc_attr__('Coupon does not exists.', 'inventor-coupons'),
                    ]);
                    wp_die();
                }
                $codes = get_post_meta($coupon_id, INVENTOR_COUPON_PREFIX . 'codes', true);
                // Initialize $codes array if we have no codes in dtabase
                if (empty($codes)) {
                    $codes = [];
                }
                // Check if code for already signed user exists
                $user_code = Inventor_Coupons_Logic::get_user_code($coupon_id, get_current_user_id());
                // Max number of coupons exceeded
                $max_number = get_post_meta($_GET['id'], INVENTOR_COUPON_PREFIX . 'count', true);
                if ( ! empty($max_number)) {
                    if (count($codes) >= $max_number) {
                        echo json_encode([
                            'status'  => false,
                            'message' => esc_attr__('Max number of coupons exceeded.', 'inventor-coupons'),
                        ]);
                        wp_die();
                    }
                }
                // Create new code
                if (empty($user_code)) {
                    $user_code = Inventor_Utilities::get_short_uuid();
                }
                $codes[] = [
                    INVENTOR_COUPON_PREFIX . 'code_generated' => $user_code,
                    INVENTOR_COUPON_PREFIX . 'user_id'        => get_current_user_id(),
                ];
                update_post_meta($_GET['id'], INVENTOR_COUPON_PREFIX . 'codes', $codes);
                echo json_encode([
                    'status' => true,
                    'code'   => $user_code,
                ]);
                wp_die();
            }

 }
